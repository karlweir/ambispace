<object>
  <spriteName>sPlayer</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Facing = 0
depth = 10
WeaponCount = 0
SelectedWeaponIndex = 0
Power = 5
PowerMax = 100
Fuel = 200
FuelMax = 1000



ResetShunts()

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/* Movement */

MySpeed = 150 / room_speed //2.5

// Comment out this line to enable player deceleration
//speed = 0

inc = 0.2;
frc = 120;
ts = 5;
//turn a+= (1 to 0 to -1) * turn speed
image_angle += (keyboard_check(ord('A'))-keyboard_check(ord('D'))) * ts;
//motion add at pointing angle, at throttle value (1 to 0 to -1) * acceleration increment
motion_add(image_angle, (keyboard_check(ord('W'))-keyboard_check(ord('S'))) * inc );
//ambient friction is speed/20... friction is relative to speed.
friction = speed/frc;

image_speed = 0

if keyboard_check_pressed(ord('W')) {
    image_index = 1;
    audio_play_sound(sfxEngine, 1, true);
    audio_sound_gain(sfxEngine, 0.1, 0);
} 

if keyboard_check_released(ord('W')) {
    image_index = 0;
    audio_stop_sound(sfxEngine);
}

// Player deceleration
 Deceleration = 50 / (room_speed * room_speed) //3600
if speed &gt; Deceleration {
    speed = speed - Deceleration
} else {
    speed = 0
} 

hspeed = hspeed + xShunt
vspeed = vspeed + yShunt
ResetShunts()

// If we're about to hit a block
if place_meeting(x + hspeed, y + vspeed, oSolid) {
    
    //Keep as much of our horizontal speed as possible
    OldHSpeed = hspeed
    hspeed = 0
    while 
        place_meeting(x + hspeed + sign(OldHSpeed), y, oSolid) = false &amp;&amp; //Check there's still room if we crept a bit closer to our old hspeed
        abs(hspeed) &lt; abs(OldHSpeed) //Check we haven't restored all of our hspeed, and only pay attention to the 'absolute' values, the magnatudes
    {    
        //Creep towards old hspeed
        hspeed = hspeed + sign(OldHSpeed)
    }
    
    //We have now figured out how much of our hspeed we can keep without hitting anything, so we're keeping that.
        
    //Keep as much of our verticle speed as possible
    OldVSpeed = vspeed
    vspeed = 0
    while 
        place_meeting(x + hspeed, y  + vspeed + sign(OldVSpeed), oSolid) = false &amp;&amp; //Check there's still room if we crept a bit closer to our old vspeed
        abs(vspeed) &lt; abs(OldVSpeed) //Check we haven't restored all of our vspeed, and only pay attention to the 'absolute' values, the magnatudes
    {    
        //Creep towards old hspeed
        vspeed = vspeed + sign(OldVSpeed)
    }
    
}

/* Weapon Switching */

if mouse_check_button_pressed(mb_right) {
    SelectedWeaponIndex = SelectedWeaponIndex + 1
    if SelectedWeaponIndex &gt;= WeaponCount {
        SelectedWeaponIndex = 0
    }
}

/* Facing */

Facing = point_direction(x,y,mouse_x,mouse_y)

/* Power Up */
if Power &lt;= PowerMax {
    PowerUpCollected = instance_place(x,y,oPowerUp)
    if instance_exists(PowerUpCollected) {
        with PowerUpCollected { instance_destroy() }
        Power = Power + 1
    }
}

/* Stay inside the room */

if x &lt; 0 { x = 0 }
if y &lt; 0 { y = 0 }

if x &gt; room_width { x = room_width }
if y &gt; room_height { y = room_height }

/* Death */

//Look for an enemy touching us
EnemyTouchingMe = instance_place(x,y,oEnemy)


//If there is one
if instance_exists(EnemyTouchingMe) {
    
    ExplodeIntoANumberOfChunks(oGame.NumberOfBitsThePlayerIsMadeOf,oPlayerChunk)
    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Draw our sprite normally, but facing our 'facing' direction without changing image_angle, so as not to affect collision.

draw_sprite_ext(sprite_index,image_index,x,y,image_xscale,image_yscale,image_angle,image_blend,image_alpha)
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>16,16</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>
